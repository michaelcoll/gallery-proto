// Photo related messages and service
syntax = "proto3";

package photo.v1;

// The photo service definition
service PhotoService {
  // GetPhotos returns all the photos
  rpc GetPhotos(GetPhotosRequest) returns (GetPhotosResponse) {}
  // GetByHash returns a photo by its hash
  rpc GetByHash(GetByHashRequest) returns (GetByHashResponse) {}
  // ExistsByHash returns true if a photo with the given hash exists
  rpc ExistsByHash(ExistsByHashRequest) returns (ExistsByHashResponse) {}
  // ContentByHash returns the photo content by its hash
  rpc ContentByHash(ContentByHashRequest) returns (stream PhotoServiceContentByHashResponse) {}
  // ThumbnailByHash returns the photo thumbnail by its hash
  // A width or a height can be provided, if so the thumbnail will have one of the property.
  // If neither the width nor the height is specified, a width of 200 will be used.
  // If a width and a height is specified, only the width will be used.
  rpc ThumbnailByHash(ThumbnailByHashRequest) returns (stream PhotoServiceThumbnailByHashResponse) {}
}

// GetPhotosRequest represent a search query with pagination options to
// indicate which results to include in the response.
message GetPhotosRequest {
  uint32 limit = 1; // the number of element to retrieve
  uint32 offset = 2; // the position of the first element to retrieve
}

message GetPhotosResponse {
  repeated Photo photos = 1; // the photos
  uint32 total = 2; // the total number of photos
}

// GetByHashRequest represent a search query with a photo hash
message GetByHashRequest {
  string hash = 1; // a photo hash
}

message GetByHashResponse {
  Photo photo = 1;
}

// ExistsByHashRequest represent an existence search query with a photo hash
message ExistsByHashRequest {
  string hash = 1; // a photo hash
}

message ExistsByHashResponse {
  bool exists = 1;
}

// ContentByHashRequest represent a search query with a photo hash
message ContentByHashRequest {
  string hash = 1; // a photo hash
}

message PhotoServiceContentByHashResponse {
  bytes data = 1;
  string content_type = 2;
}

// ThumbnailByHashRequest represent a search query with a photo hash, a width or an height.
message ThumbnailByHashRequest {
  string hash = 1; // a photo hash
  uint32 width = 2; // the requested width for the thumbnail
  uint32 height = 3; // the requested height for the thumbnail
}

message PhotoServiceThumbnailByHashResponse {
  bytes data = 1;
  string content_type = 2;
}

// Photo contains basic info of a photo and its metadata
message Photo {
  // Main

  string hash = 1; // the photo hash
  string path = 2; // the photo path on the daemon fs

  // Exif

  string date_time = 3; // the date
  uint32 iso = 4; // the ISO of the image
  string exposure_time = 5; // the exposure as a fraction
  uint32 x_dimension = 6; // the x dimension of the image
  uint32 y_dimension = 7; // the y dimension of the image
  string model = 8; // the model of the camera that took the image
  string f_number = 9; // the f Number
}